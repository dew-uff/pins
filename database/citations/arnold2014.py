# coding: utf-8
from snowballing.models import *
from snowballing import dbindex
dbindex.last_citation_file = dbindex.this_file(__file__)

from ..work.y1988 import feldman1988a
from ..work.y1991 import bacon1991a
from ..work.y1993 import netzer1993a
from ..work.y1995 import plank1995a
from ..work.y1996 import bressoud1996a
from ..work.y1996 import russinovich1996a
from ..work.y1998 import vahdat1998a
from ..work.y1999 import ronsse1999a
from ..work.y1999 import santry1999a
from ..work.y2002 import dunlap2002a
from ..work.y2002 import elnozahy2002a
from ..work.y2003 import king2003a
from ..work.y2003 import pozniansky2003a
from ..work.y2003 import xu2003a
from ..work.y2004 import bent2004a
from ..work.y2004 import srinivasan2004a
from ..work.y2005 import goel2005a
from ..work.y2005 import luk2005a
from ..work.y2005 import newsome2005a
from ..work.y2005 import petersen2005a
from ..work.y2006 import muniswamy2006a
from ..work.y2006 import naraynasmy2006a
from ..work.y2007 import laadan2007a
from ..work.y2007 import xu2007a
from ..work.y2008 import chow2008a
from ..work.y2008 import dunlap2008a
from ..work.y2008 import hower2008a
from ..work.y2008 import montesinos2008a
from ..work.y2008 import nightingale2008a
from ..work.y2009 import muniswamy2009b
from ..work.y2009 import adams2009a
from ..work.y2009 import altekar2009a
from ..work.y2009 import berger2009a
from ..work.y2009 import bocchino2009a
from ..work.y2009 import devietti2009a
from ..work.y2009 import olszewski2009a
from ..work.y2009 import park2009a
from ..work.y2009 import serebryany2009a
from ..work.y2010 import attariyan2010a
from ..work.y2010 import gunda2010a
from ..work.y2010 import haeberlen2010a
from ..work.y2010 import kim2010a
from ..work.y2010 import laadan2010a
from ..work.y2010 import veeraraghavan2010a
from ..work.y2010 import vlachos2010a
from ..work.y2010 import weeratunge2010a
from ..work.y2010 import zamfir2010a
from ..work.y2011 import veeraraghavan2011a
from ..work.y2011 import veeraraghavan2011b
from ..work.y2011 import cui2011a
from ..work.y2011 import liu2011a
from ..work.y2012 import attariyan2012a
from ..work.y2012 import lee2012a
from ..work.y2012 import lefebvre2012a
from ..work.y2014 import devecsery2014a


DB(Citation(
    devecsery2014a, 
    DB(Site("Linux Desktop Testing Project", "http://ldtp.freedesktop.org")),
    ref="[1]",
    contexts=[
        "Intheseandsubsequent experiments, we ensure repeatable results by automating all GUI workloads with the Linux Desktop Testing Project library [1], which captures and emulates GUI events",
        
    ],
))

DB(Citation(
    devecsery2014a, adams2009a, ref="[2]",
    contexts=[
        "Other projects have made a similar tradeoff in different domains[19,2,7,47].Forexample,Nectar[19]tradesstorage for computation in data-parallel cloud environments and supports recomputation of storage results from inputs and memoization of partial and full computations.",
        
    ],
))

DB(Citation(
    devecsery2014a, altekar2009a, ref="[3]",
    contexts=[
        "Making deterministic replay efﬁcient on multi-processors is an ongoing research challenge [15, 25, 50, 3, 38, 52, 55, 12,26],asismakingexecutiononmultiprocessorsdeterministic [8, 9, 13, 28, 37].",
        "Since races are very infrequent, we suspect that it should usually be possible to search through all possible interleavings of the racing instructions to ﬁnd an interleaving that is indistinguishable from the recorded execution [3, 38].",
        
    ],
))

DB(Citation(
    devecsery2014a, attariyan2012a, ref="[4]",
    contexts=[
        "Arnold uses techniques from Xray[4]tocompensateforthedivergencescausedbyanalysis;forinstance,itpreventsPinfromallocatingmemory thatwill conﬂict with thereplayedexecution and itidentiﬁes system calls generated by Pin and executes them live rather than trying to supply nondeterministic values from the group’s log.",
        
    ],
))

DB(Citation(
    devecsery2014a, attariyan2010a, ref="[5]",
    contexts=[
        "This includes, in addition to index and data ﬂow inﬂuence, the inﬂuence propagated viacontrolﬂowastrackedusingthealgorithmsdeveloped by ConfAid [5].",
        
    ],
))

DB(Citation(
    devecsery2014a, bacon1991a, ref="[6]",
    contexts=[
        "deterministic replay for uniprocessors is a mature technology, and implementations exist in both software [54, 10, 14, 17, 36, 43, 46] and hardware [6, 34, 53, 21, 30, 33, 51].",
        
    ],
))

DB(Citation(
    devecsery2014a, bent2004a, ref="[7]",
    contexts=[
        "Other projects have made a similar tradeoff in different domains[19,2,7,47].Forexample,Nectar[19]tradesstorage for computation in data-parallel cloud environments and supports recomputation of storage results from inputs and memoization of partial and full computations.",
        
    ],
))

DB(Citation(
    devecsery2014a, berger2009a, ref="[8]",
    contexts=[
        "Making deterministic replay efﬁcient on multi-processors is an ongoing research challenge [15, 25, 50, 3, 38, 52, 55, 12,26],asismakingexecutiononmultiprocessorsdeterministic [8, 9, 13, 28, 37].",
        
    ],
))

DB(Citation(
    devecsery2014a, bocchino2009a, ref="[9]",
    contexts=[
        "Making deterministic replay efﬁcient on multi-processors is an ongoing research challenge [15, 25, 50, 3, 38, 52, 55, 12,26],asismakingexecutiononmultiprocessorsdeterministic [8, 9, 13, 28, 37].",
        
    ],
))

DB(Citation(
    devecsery2014a, bressoud1996a, ref="[10]",
    contexts=[
        "Thekeytechnologies that enable Arnold to provide the properties of an eidetic system efﬁciently are ddeterministic record and replay [10], model-based compression, deduplicated ﬁle recording,operatingsystemtrackingofinformationﬂow between processes [23], and retrospective binary analysis of information ﬂow within processes [11, 35].",
        "deterministic replay for uniprocessors is a mature technology, and implementations exist in both software [54, 10, 14, 17, 36, 43, 46] and hardware [6, 34, 53, 21, 30, 33, 51].",
        
    ],
))

DB(Citation(
    devecsery2014a, chow2008a, ref="[11]",
    contexts=[
        "Thekeytechnologies that enable Arnold to provide the properties of an eidetic system efﬁciently are ddeterministic record and replay [10], model-based compression, deduplicated ﬁle recording,operatingsystemtrackingofinformationﬂow between processes [23], and retrospective binary analysis of information ﬂow within processes [11, 35].",
        "Second, it allows Arnold to defer the work needed to track lineage from the time of execution to the time of querying [11].",
        
    ],
))

DB(Citation(
    devecsery2014a, cui2011a, ref="[12]",
    contexts=[
        "Making deterministic replay efﬁcient on multi-processors is an ongoing research challenge [15, 25, 50, 3, 38, 52, 55, 12,26],asismakingexecutiononmultiprocessorsdeterministic [8, 9, 13, 28, 37].",
        
    ],
))

DB(Citation(
    devecsery2014a, devietti2009a, ref="[13]",
    contexts=[
        "Making deterministic replay efﬁcient on multi-processors is an ongoing research challenge [15, 25, 50, 3, 38, 52, 55, 12,26],asismakingexecutiononmultiprocessorsdeterministic [8, 9, 13, 28, 37].",
        
    ],
))

DB(Citation(
    devecsery2014a, dunlap2002a, ref="[14]",
    contexts=[
        "deterministic replay for uniprocessors is a mature technology, and implementations exist in both software [54, 10, 14, 17, 36, 43, 46] and hardware [6, 34, 53, 21, 30, 33, 51].",
        
    ],
))

DB(Citation(
    devecsery2014a, dunlap2008a, ref="[15]",
    contexts=[
        "Making deterministic replay efﬁcient on multi-processors is an ongoing research challenge [15, 25, 50, 3, 38, 52, 55, 12,26],asismakingexecutiononmultiprocessorsdeterministic [8, 9, 13, 28, 37].",
        
    ],
))

DB(Citation(
    devecsery2014a, elnozahy2002a, ref="[16]",
    contexts=[
        "Checkpointing and rollback-recovery have often been used to restore past state[16]",
        "Since Arnold can reproduce any current or past ﬁle version via replay, it is the logs of nondeterminism that areArnold’strulypersistentstore[16].",
        
    ],
))

DB(Citation(
    devecsery2014a, feldman1988a, ref="[17]",
    contexts=[
        "deterministic replay for uniprocessors is a mature technology, and implementations exist in both software [54, 10, 14, 17, 36, 43, 46] and hardware [6, 34, 53, 21, 30, 33, 51].",
        
    ],
))

DB(Citation(
    devecsery2014a, goel2005a, ref="[18]",
    contexts=[
        "Prior research has examined how to track the lineage of data, either within a process [35] or between processes [23, 22, 18].",
        "This case study shows the value of not limiting a priori the types of lineage that an eidetic system can track. For example, prior tools for intrusion recovery focus on inter-process lineage but cannot track intra-process lineage [23, 18, 22].",
        
    ],
))

DB(Citation(
    devecsery2014a, gunda2010a, ref="[19]",
    contexts=[
        "Other projects have made a similar tradeoff in different domains[19,2,7,47].Forexample,Nectar[19]tradesstorage for computation in data-parallel cloud environments and supports recomputation of storage results from inputs and memoization of partial and full computations.",
        
    ],
))

DB(Citation(
    devecsery2014a, haeberlen2010a, ref="[20]",
    contexts=[
        "A complementary direction of future work is how to prevent or detect tampering with Arnold’s log [20].",
        
    ],
))

DB(Citation(
    devecsery2014a, hower2008a, ref="[21]",
    contexts=[
        "deterministic replay for uniprocessors is a mature technology, and implementations exist in both software [54, 10, 14, 17, 36, 43, 46] and hardware [6, 34, 53, 21, 30, 33, 51].",
        
    ],
))

DB(Citation(
    devecsery2014a, kim2010a, ref="[22]",
    contexts=[
        "Prior research has examined how to track the lineage of data, either within a process [35] or between processes [23, 22, 18].",
        "This case study shows the value of not limiting a priori the types of lineage that an eidetic system can track. For example, prior tools for intrusion recovery focus on inter-process lineage but cannot track intra-process lineage [23, 18, 22].",
        
    ],
))

DB(Citation(
    devecsery2014a, king2003a, ref="[23]",
    contexts=[
        "Thekeytechnologies that enable Arnold to provide the properties of an eidetic system efﬁciently are ddeterministic record and replay [10], model-based compression, deduplicated ﬁle recording,operatingsystemtrackingofinformationﬂow between processes [23], and retrospective binary analysis of information ﬂow within processes [11, 35].",
        "Prior research has examined how to track the lineage of data, either within a process [35] or between processes [23, 22, 18].",
        "This case study shows the value of not limiting a priori the types of lineage that an eidetic system can track. For example, prior tools for intrusion recovery focus on inter-process lineage but cannot track intra-process lineage [23, 18, 22].",
        
    ],
))

DB(Citation(
    devecsery2014a, laadan2007a, ref="[24]",
    contexts=[
        "For example, versioning filesystems[39,44,49] store regular snapshots of ﬁle state; process checkpointing systems [40] store snapshots of running processes; and systems like DejaView snapshot both processes and ﬁles [24].",
        "DejaView [24] indexes and provides a query interface for prior information that is displayed on the screen or available through the accessibility API.",
        
    ],
))

DB(Citation(
    devecsery2014a, laadan2010a, ref="[25]",
    contexts=[
        "Making deterministic replay efﬁcient on multi-processors is an ongoing research challenge [15, 25, 50, 3, 38, 52, 55, 12,26],asismakingexecutiononmultiprocessorsdeterministic [8, 9, 13, 28, 37].",
        
    ],
))

DB(Citation(
    devecsery2014a, lee2012a, ref="[26]",
    contexts=[
        "Making deterministic replay efﬁcient on multi-processors is an ongoing research challenge [15, 25, 50, 3, 38, 52, 55, 12,26],asismakingexecutiononmultiprocessorsdeterministic [8, 9, 13, 28, 37].",
        
    ],
))
DB(Citation(
    devecsery2014a, lefebvre2012a, ref="[27]",
    contexts=[
        "Tralfamadore traces the execution of a system and provides mechanisms and components to analyze that trace [27]",
        
    ],
))

DB(Citation(
    devecsery2014a, liu2011a, ref="[28]",
    contexts=[
        "Making deterministic replay efﬁcient on multi-processors is an ongoing research challenge [15, 25, 50, 3, 38, 52, 55, 12,26],asismakingexecutiononmultiprocessorsdeterministic [8, 9, 13, 28, 37].",
        
    ],
))

DB(Citation(
    devecsery2014a, luk2005a, ref="[29]",
    contexts=[
        "Arnold uses Pin [29] binary instrumentation to analyze replayed executions and track the lineage of data within a replay group.",
        
    ],
))

DB(Citation(
    devecsery2014a, montesinos2008a, ref="[30]",
    contexts=[
        "deterministic replay for uniprocessors is a mature technology, and implementations exist in both software [54, 10, 14, 17, 36, 43, 46] and hardware [6, 34, 53, 21, 30, 33, 51].",
        
    ],
))

DB(Citation(
    devecsery2014a, muniswamy2009b, ref="[31]",
    contexts=[
        "deterministic replay for uniprocessors is a mature technology, and implementations exist in both software [54, 10, 14, 17, 36, 43, 46] and hardware [6, 34, 53, 21, 30, 33, 51].",
        "Provenance-aware storage systems [31, 32] annotate ﬁle data with causal history to capture the relationship between processes and ﬁles.",
        
    ],
))

DB(Citation(
    devecsery2014a, muniswamy2006a, ref="[32]",
    contexts=[
        "Provenance-aware storage systems [31, 32] annotate ﬁle data with causal history to capture the relationship between processes and ﬁles.",
        
    ],
))

DB(Citation(
    devecsery2014a, naraynasmy2006a, ref="[33]",
    contexts=[
        "deterministic replay for uniprocessors is a mature technology, and implementations exist in both software [54, 10, 14, 17, 36, 43, 46] and hardware [6, 34, 53, 21, 30, 33, 51].",
        
    ],
))

DB(Citation(
    devecsery2014a, netzer1993a, ref="[34]",
    contexts=[
        "deterministic replay for uniprocessors is a mature technology, and implementations exist in both software [54, 10, 14, 17, 36, 43, 46] and hardware [6, 34, 53, 21, 30, 33, 51].",
        
    ],
))

DB(Citation(
    devecsery2014a, newsome2005a, ref="[35]",
    contexts=[
        "Thekeytechnologies that enable Arnold to provide the properties of an eidetic system efﬁciently are ddeterministic record and replay [10], model-based compression, deduplicated ﬁle recording,operatingsystemtrackingofinformationﬂow between processes [23], and retrospective binary analysis of information ﬂow within processes [11, 35].",
        "Prior research has examined how to track the lineage of data, either within a process [35] or between processes [23, 22, 18].",
        
    ],
))

DB(Citation(
    devecsery2014a, nightingale2008a, ref="[36]",
    contexts=[
        "deterministic replay for uniprocessors is a mature technology, and implementations exist in both software [54, 10, 14, 17, 36, 43, 46] and hardware [6, 34, 53, 21, 30, 33, 51].",
        
    ],
))

DB(Citation(
    devecsery2014a, olszewski2009a, ref="[37]",
    contexts=[
        "Making deterministic replay efﬁcient on multi-processors is an ongoing research challenge [15, 25, 50, 3, 38, 52, 55, 12,26],asismakingexecutiononmultiprocessorsdeterministic [8, 9, 13, 28, 37].",
        
    ],
))

DB(Citation(
    devecsery2014a, park2009a, ref="[38]",
    contexts=[
        "Making deterministic replay efﬁcient on multi-processors is an ongoing research challenge [15, 25, 50, 3, 38, 52, 55, 12,26],asismakingexecutiononmultiprocessorsdeterministic [8, 9, 13, 28, 37].",
        "Since races are very infrequent, we suspect that it should usually be possible to search through all possible interleavings of the racing instructions to ﬁnd an interleaving that is indistinguishable from the recorded execution [3, 38].",
        
    ],
))

DB(Citation(
    devecsery2014a, petersen2005a, ref="[39]",
    contexts=[
        "For example, versioning filesystems[39,44,49] store regular snapshots of ﬁle state; process checkpointing systems [40] store snapshots of running processes; and systems like DejaView snapshot both processes and ﬁles [24].",
        
    ],
))

DB(Citation(
    devecsery2014a, plank1995a, ref="[40]",
    contexts=[
        "For example, versioning filesystems[39,44,49] store regular snapshots of ﬁle state; process checkpointing systems [40] store snapshots of running processes; and systems like DejaView snapshot both processes and ﬁles [24].",
        
    ],
))

DB(Citation(
    devecsery2014a, pozniansky2003a, ref="[41]",
    contexts=[
        "Arnold supports the ability to instrument and observe the execution of replayed recordings (Section 4.6), and we use this to run a standard vector-clock data race detector [41] when a replay divergence is detected",
        
    ],
))

DB(Citation(
    devecsery2014a, ronsse1999a, ref="[42]",
    contexts=[
        "each replayed thread will execute the same sequence of instructions and system calls, observe the same values read, and produce the same results as during recording [42].",
        
    ],
))

DB(Citation(
    devecsery2014a, russinovich1996a, ref="[43]",
    contexts=[
        "deterministic replay for uniprocessors is a mature technology, and implementations exist in both software [54, 10, 14, 17, 36, 43, 46] and hardware [6, 34, 53, 21, 30, 33, 51].",
        
    ],
))

DB(Citation(
    devecsery2014a, santry1999a, ref="[44]",
    contexts=[
        "For example, versioning filesystems[39,44,49] store regular snapshots of ﬁle state; process checkpointing systems [40] store snapshots of running processes; and systems like DejaView snapshot both processes and ﬁles [24].",
        
    ],
))

DB(Citation(
    devecsery2014a, serebryany2009a, ref="[45]",
    contexts=[
        "Interestingly, many of the races we found were already documented,forexamplebydeveloperswhoranThreadSanitizer[45]orsimilartools",
        
    ],
))

DB(Citation(
    devecsery2014a, srinivasan2004a, ref="[46]",
    contexts=[
        "deterministic replay for uniprocessors is a mature technology, and implementations exist in both software [54, 10, 14, 17, 36, 43, 46] and hardware [6, 34, 53, 21, 30, 33, 51].",
        
    ],
))

DB(Citation(
    devecsery2014a, vahdat1998a, ref="[47]",
    contexts=[
        "Other projects have made a similar tradeoff in different domains[19,2,7,47].Forexample,Nectar[19]tradesstorage for computation in data-parallel cloud environments and supports recomputation of storage results from inputs and memoization of partial and full computations.",
        
    ],
))

DB(Citation(
    devecsery2014a, veeraraghavan2011a, ref="[48]",
    contexts=[
        "Veeraraghavan et al. [48] observed a synergy between deterministic replay and data race detection: if the only reason that a replayed execution may diverge from a recorded execution is the presence of a data race, then the replay system can act as a very efﬁcient datarace detector.",
        
    ],
))

DB(Citation(
    devecsery2014a, veeraraghavan2010a, ref="[49]",
    contexts=[
        "For example, versioning filesystems[39,44,49] store regular snapshots of ﬁle state; process checkpointing systems [40] store snapshots of running processes; and systems like DejaView snapshot both processes and ﬁles [24].",
        
    ],
))

DB(Citation(
    devecsery2014a, veeraraghavan2011b, ref="[50]",
    contexts=[
        "Making deterministic replay efﬁcient on multi-processors is an ongoing research challenge [15, 25, 50, 3, 38, 52, 55, 12,26],asismakingexecutiononmultiprocessorsdeterministic [8, 9, 13, 28, 37].",
        
    ],
))

DB(Citation(
    devecsery2014a, vlachos2010a, ref="[51]",
    contexts=[
        "deterministic replay for uniprocessors is a mature technology, and implementations exist in both software [54, 10, 14, 17, 36, 43, 46] and hardware [6, 34, 53, 21, 30, 33, 51].",
        
    ],
))

DB(Citation(
    devecsery2014a, weeratunge2010a, ref="[52]",
    contexts=[
        "Making deterministic replay efﬁcient on multi-processors is an ongoing research challenge [15, 25, 50, 3, 38, 52, 55, 12,26],asismakingexecutiononmultiprocessorsdeterministic [8, 9, 13, 28, 37].",
        
    ],
))

DB(Citation(
    devecsery2014a, xu2003a, ref="[53]",
    contexts=[
        "deterministic replay for uniprocessors is a mature technology, and implementations exist in both software [54, 10, 14, 17, 36, 43, 46] and hardware [6, 34, 53, 21, 30, 33, 51].",
        
    ],
))

DB(Citation(
    devecsery2014a, xu2007a, ref="[54]",
    contexts=[
        "deterministic replay for uniprocessors is a mature technology, and implementations exist in both software [54, 10, 14, 17, 36, 43, 46] and hardware [6, 34, 53, 21, 30, 33, 51].",
        
    ],
))

DB(Citation(
    devecsery2014a, zamfir2010a, ref="[55]",
    contexts=[
        "Making deterministic replay efﬁcient on multi-processors is an ongoing research challenge [15, 25, 50, 3, 38, 52, 55, 12,26],asismakingexecutiononmultiprocessorsdeterministic [8, 9, 13, 28, 37].",
        
    ],
))
